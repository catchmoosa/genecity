// file: SimulationOntology.java generated by ontology bean generator
package genecity.agentCommunication;

import jade.content.onto.*;
import jade.content.schema.*;

/** file: SimulationOntology.java
 * @author ontology bean generator
 * @version 2004/06/9
 */
public class SimulationOntology extends Ontology{

  //NAME
  public static final String ONTOLOGY_NAME = "Simulation-Ontology";
  private static SimulationOntology theInstance = new SimulationOntology(ACLOntology.getInstance());
  public static SimulationOntology getInstance() {
     return theInstance;
  }
  //VOCABULARY
  public static final String DESCRIPTION="Description";

  public static final String DESCRIPTION_EPOCHOFBIRTH="epochOfBirth";
  public static final String DESCRIPTION_BITGENE="bitGene";
  public static final String DESCRIPTION_Y="y";
  public static final String DESCRIPTION_NAME="name";
  public static final String DESCRIPTION_HEALTH="health";
  public static final String DESCRIPTION_FEARDEGREE="fearDegree";
  public static final String DESCRIPTION_SEX="sex";
  public static final String DESCRIPTION_INFORMATIONDEGREE="informationDegree";
  public static final String DESCRIPTION_EPOCHSTOLIVE="epochsToLive";
  public static final String DESCRIPTION_X="x";
  public static final String DESCRIPTION_FROMFAMILYID="fromFamilyID";



  public static final String FAMILIES="Families";

  public static final String NEWBORNS="NewBorns";
  public static final String NEWBORNS_REMOVEPARENTSDESCRIPTIONS="removeParentsDescriptions";
  public static final String NEWBORNS_BABYSDESCRIPTION="babysDescription";

  public static final String FAMILIES_MOTHER="mother";
  public static final String FAMILIES_FAMILYINFORMATIONDEGREE="familyInformationDegree";
  public static final String FAMILIES_FAMILYID="familyID";
  public static final String FAMILIES_CHILDREN="children";
  public static final String FAMILIES_FAMILYFEARDEGREE="familyFearDegree";
  public static final String FAMILIES_FATHER="father";
  public static final String HUMAN="Human";
  public static final String FAMILIES_FY="fY";
  public static final String FAMILIES_FX="fX";

  public static final String HUMAN_CHARACTERISTICS="characteristics";
  public static final String PREFERENCES="Preferences";
  public static final String PREFERENCES_WILLFORMARRIAGE="willForMarriage";
  public static final String PREFERENCES_WHOIS="whois";
  public static final String PREFERENCES_PREFERENCES="preferences";

  /**
   * Constructor
  */
  private SimulationOntology(Ontology base){
   super(ONTOLOGY_NAME, base);
   try {
    // adding Concept(s)
    ConceptSchema descriptionSchema = new ConceptSchema(DESCRIPTION);
    add(descriptionSchema, Description.class);
    // adding Predicate(s)
    PredicateSchema familiesSchema = new PredicateSchema(FAMILIES);
    add(familiesSchema, Families.class);
    PredicateSchema newBornsSchema = new PredicateSchema(NEWBORNS);
    add(newBornsSchema, NewBorns.class);
    PredicateSchema humanSchema = new PredicateSchema(HUMAN);
    add(humanSchema, Human.class);
    PredicateSchema preferencesSchema = new PredicateSchema(PREFERENCES);
    add(preferencesSchema, Preferences.class);


    descriptionSchema.add(DESCRIPTION_EPOCHOFBIRTH, (TermSchema)getSchema(BasicOntology.INTEGER) , ObjectSchema.OPTIONAL);
    // facets of epochOfBirth:
    descriptionSchema.add(DESCRIPTION_BITGENE, (TermSchema)getSchema(BasicOntology.INTEGER) , ObjectSchema.OPTIONAL);
    // facets of bitGene:
    descriptionSchema.add(DESCRIPTION_Y, (TermSchema)getSchema(BasicOntology.INTEGER) , ObjectSchema.OPTIONAL);
    // facets of y:
    descriptionSchema.add(DESCRIPTION_NAME, (TermSchema)getSchema(BasicOntology.STRING) , ObjectSchema.OPTIONAL);
    // facets of name:
    descriptionSchema.add(DESCRIPTION_HEALTH, (TermSchema)getSchema(BasicOntology.STRING) , ObjectSchema.OPTIONAL);
    // facets of health:
    descriptionSchema.add(DESCRIPTION_FEARDEGREE, (TermSchema)getSchema(BasicOntology.INTEGER) , ObjectSchema.OPTIONAL);
    // facets of FearDegree:
    descriptionSchema.add(DESCRIPTION_SEX, (TermSchema)getSchema(BasicOntology.STRING) , ObjectSchema.OPTIONAL);
    // facets of sex:
    descriptionSchema.add(DESCRIPTION_INFORMATIONDEGREE, (TermSchema)getSchema(BasicOntology.INTEGER) , ObjectSchema.OPTIONAL);
    // facets of InformationDegree:
    descriptionSchema.add(DESCRIPTION_EPOCHSTOLIVE, (TermSchema)getSchema(BasicOntology.INTEGER) , ObjectSchema.OPTIONAL);
    // facets of epochsToLive:
    descriptionSchema.add(DESCRIPTION_X, (TermSchema)getSchema(BasicOntology.INTEGER) , ObjectSchema.OPTIONAL);
    // facets of fromFamilyID:
    descriptionSchema.add(DESCRIPTION_FROMFAMILYID, (TermSchema)getSchema(BasicOntology.INTEGER) , ObjectSchema.OPTIONAL);

    // facets of x:
    familiesSchema.add(FAMILIES_FX, (TermSchema)getSchema(BasicOntology.INTEGER) , ObjectSchema.OPTIONAL);
    // facets of fX:
    familiesSchema.add(FAMILIES_FY, (TermSchema)getSchema(BasicOntology.INTEGER) , ObjectSchema.OPTIONAL);
    // facets of fY:
    familiesSchema.add(FAMILIES_FAMILYINFORMATIONDEGREE, (TermSchema)getSchema(BasicOntology.INTEGER) , ObjectSchema.OPTIONAL);
    // facets of FamilyInformationDegree:
    familiesSchema.add(FAMILIES_FAMILYID, (TermSchema)getSchema(BasicOntology.INTEGER) , ObjectSchema.OPTIONAL);
    // facets of familyID:
    familiesSchema.add(FAMILIES_FAMILYFEARDEGREE, (TermSchema)getSchema(BasicOntology.INTEGER) , ObjectSchema.OPTIONAL);
    // facets of FamilyFearDegree:
    familiesSchema.add(FAMILIES_FATHER, descriptionSchema , ObjectSchema.OPTIONAL);
    // facets of Father: MaximumCardinality 1, getAllowedClses: Cls(Description), , getAllowedParents: Cls(Description), , getAllowedValues: Cls(Description),
    familiesSchema.add(FAMILIES_MOTHER, descriptionSchema , ObjectSchema.OPTIONAL);
    // facets of Mother: MaximumCardinality 1, getAllowedClses: Cls(Description), , getAllowedParents: Cls(Description), , getAllowedValues: Cls(Description),

    newBornsSchema.add(NEWBORNS_REMOVEPARENTSDESCRIPTIONS, (AggregateSchema)getSchema(BasicOntology.SET) , ObjectSchema.OPTIONAL);
    // facets of removeParentsDescriptions:
    newBornsSchema.add(NEWBORNS_BABYSDESCRIPTION, (AggregateSchema)getSchema(BasicOntology.SET) , ObjectSchema.OPTIONAL);
    // facets of babysDescription: getAllowedClses: Cls(Description), , getAllowedParents: Cls(Description), , getAllowedValues: Cls(Description),

    humanSchema.add(HUMAN_CHARACTERISTICS, descriptionSchema , ObjectSchema.OPTIONAL);
    // facets of Characteristics: MaximumCardinality 1, getAllowedClses: Cls(Description), , getAllowedParents: Cls(Description), , getAllowedValues: Cls(Description),
    familiesSchema.add(FAMILIES_CHILDREN, (AggregateSchema)getSchema(BasicOntology.SET) , ObjectSchema.OPTIONAL);
    // facets of Children: getAllowedClses: Cls(Description), , getAllowedParents: Cls(Description), , getAllowedValues: Cls(Description),
    preferencesSchema.add(PREFERENCES_PREFERENCES, (AggregateSchema)getSchema(BasicOntology.SET) , ObjectSchema.OPTIONAL);
    // facets of preferences: getAllowedClses: Cls(Description), , getAllowedParents: Cls(Description), , getAllowedValues: Cls(Description),
    preferencesSchema.add(PREFERENCES_WILLFORMARRIAGE, (TermSchema)getSchema(BasicOntology.FLOAT) , ObjectSchema.OPTIONAL);
    // facets of willForMarriage:
    preferencesSchema.add(PREFERENCES_WHOIS, descriptionSchema , ObjectSchema.OPTIONAL);
    // facets of whois: MaximumCardinality 1, getAllowedClses: Cls(Description), , getAllowedParents: Cls(Description), , getAllowedValues: Cls(Description),

   }catch (Exception e) {e.printStackTrace();}
  }
}
